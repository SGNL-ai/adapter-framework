// Copyright 2025 SGNL.ai, Inc.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/connector/v1/connector.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectorService_RelayRequests_FullMethodName = "/sgnl.connector.v1.ConnectorService/RelayRequests"
	ConnectorService_RelayLogs_FullMethodName     = "/sgnl.connector.v1.ConnectorService/RelayLogs"
)

// ConnectorServiceClient is the client API for ConnectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConnectorService is a gRPC service implemented by the Connector Service to
// relay requests from the Adapters and Action Handlers to the remote on-premises
// connectors.
type ConnectorServiceClient interface {
	// Bidirectional streaming RPC for request relay
	// The initial stream metadata should contain:
	// - connector_id: Unique ID for the connector
	// - client_id: Client identifier
	// - auth_token: Auth Token
	// - version: Connector version
	// - labels: Optional metadata as key-value pairs
	RelayRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConnectorResponse, ConnectorRequest], error)
	// Unary RPC for relaying log batches from connector to service
	// Uses the same authentication as RelayRequests (via metadata)
	// Returns Empty on success, error on failure
	RelayLogs(ctx context.Context, in *LogBatch, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type connectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectorServiceClient(cc grpc.ClientConnInterface) ConnectorServiceClient {
	return &connectorServiceClient{cc}
}

func (c *connectorServiceClient) RelayRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConnectorResponse, ConnectorRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ConnectorService_ServiceDesc.Streams[0], ConnectorService_RelayRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConnectorResponse, ConnectorRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_RelayRequestsClient = grpc.BidiStreamingClient[ConnectorResponse, ConnectorRequest]

func (c *connectorServiceClient) RelayLogs(ctx context.Context, in *LogBatch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ConnectorService_RelayLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectorServiceServer is the server API for ConnectorService service.
// All implementations must embed UnimplementedConnectorServiceServer
// for forward compatibility.
//
// ConnectorService is a gRPC service implemented by the Connector Service to
// relay requests from the Adapters and Action Handlers to the remote on-premises
// connectors.
type ConnectorServiceServer interface {
	// Bidirectional streaming RPC for request relay
	// The initial stream metadata should contain:
	// - connector_id: Unique ID for the connector
	// - client_id: Client identifier
	// - auth_token: Auth Token
	// - version: Connector version
	// - labels: Optional metadata as key-value pairs
	RelayRequests(grpc.BidiStreamingServer[ConnectorResponse, ConnectorRequest]) error
	// Unary RPC for relaying log batches from connector to service
	// Uses the same authentication as RelayRequests (via metadata)
	// Returns Empty on success, error on failure
	RelayLogs(context.Context, *LogBatch) (*emptypb.Empty, error)
	mustEmbedUnimplementedConnectorServiceServer()
}

// UnimplementedConnectorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectorServiceServer struct{}

func (UnimplementedConnectorServiceServer) RelayRequests(grpc.BidiStreamingServer[ConnectorResponse, ConnectorRequest]) error {
	return status.Errorf(codes.Unimplemented, "method RelayRequests not implemented")
}
func (UnimplementedConnectorServiceServer) RelayLogs(context.Context, *LogBatch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayLogs not implemented")
}
func (UnimplementedConnectorServiceServer) mustEmbedUnimplementedConnectorServiceServer() {}
func (UnimplementedConnectorServiceServer) testEmbeddedByValue()                          {}

// UnsafeConnectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectorServiceServer will
// result in compilation errors.
type UnsafeConnectorServiceServer interface {
	mustEmbedUnimplementedConnectorServiceServer()
}

func RegisterConnectorServiceServer(s grpc.ServiceRegistrar, srv ConnectorServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectorService_ServiceDesc, srv)
}

func _ConnectorService_RelayRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServiceServer).RelayRequests(&grpc.GenericServerStream[ConnectorResponse, ConnectorRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ConnectorService_RelayRequestsServer = grpc.BidiStreamingServer[ConnectorResponse, ConnectorRequest]

func _ConnectorService_RelayLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServiceServer).RelayLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectorService_RelayLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServiceServer).RelayLogs(ctx, req.(*LogBatch))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectorService_ServiceDesc is the grpc.ServiceDesc for ConnectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sgnl.connector.v1.ConnectorService",
	HandlerType: (*ConnectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayLogs",
			Handler:    _ConnectorService_RelayLogs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RelayRequests",
			Handler:       _ConnectorService_RelayRequests_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/connector/v1/connector.proto",
}
